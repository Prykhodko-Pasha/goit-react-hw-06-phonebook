{"version":3,"sources":["components/Section/Section.module.css","components/Form/Form.module.css","components/Section/Section.js","redux/actions.js","components/Form/Form.js","components/ContactsItem/ContactsItem.js","components/Contacts/Contacts.js","components/ContactsSearch/ContactsSearch.js","components/App.js","redux/reducer.js","redux/store.js","index.js","components/Contacts/Contacts.module.css"],"names":["module","exports","Section","title","children","className","s","section","section__title","addContact","createAction","name","number","payload","id","uuidv4","delContact","searchContact","Form","useState","setName","setNumber","items","useSelector","state","contacts","dispatch","useDispatch","onChange","e","currentTarget","value","reset","form","onSubmit","preventDefault","filter","item","toLowerCase","length","actions","alert","type","placeholder","pattern","required","form__btn","ContactsItem","del__btn","onClick","Contacts","includes","contacts__list","map","contacts__item","ContactsSearch","wrapper","event","target","connect","text","reducers","createReducer","newContactsArr","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","App","document","getElementById"],"mappings":"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","file":"static/js/main.ae863601.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1Q3v4\",\"section__title\":\"Section_section__title__J2fGn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__BZ4td\",\"form__btn\":\"Form_form__btn__ez-UP\"};","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <div className={s.section}>\r\n      <h2 className={s.section__title}>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const addContact = createAction('Phonebook/add', (name, number) => ({\r\n  payload: { name: name, number: number, id: uuidv4() },\r\n}));\r\n\r\nexport const delContact = createAction('Phonebook/del');\r\n\r\nexport const searchContact = createAction('Phonebook/search');\r\n\r\n//======= vinilla redux =======\r\n// import * as types from './types';\r\n// import { v4 as uuidv4 } from 'uuid';\r\n\r\n// export const addContact = (name, number) => {\r\n//   return {\r\n//     type: types.ADD,\r\n//     payload: { name: name, number: number, id: uuidv4() },\r\n//   };\r\n// };\r\n\r\n// export const delContact = contactId => ({\r\n//   type: types.DEL,\r\n//   payload: contactId,\r\n// });\r\n\r\n// export const searchContact = value => ({\r\n//   type: types.SEARCH,\r\n//   payload: value,\r\n// });\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport s from './Form.module.css';\r\nimport * as actions from '../../redux/actions';\r\n\r\nexport default function Form() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const items = useSelector(state => state.contacts.items);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    const isContactExist = items.filter(\r\n      item => item.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    if (isContactExist.length === 0) {\r\n      dispatch(actions.addContact(name, number));\r\n    } else {\r\n      alert(`${name} is already in contacts.`);\r\n    }\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={onSubmit}>\r\n      <label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Name\"\r\n          value={name}\r\n          onChange={onChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          placeholder=\"Number\"\r\n          value={number}\r\n          onChange={onChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button className={s.form__btn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\n//======= vinilla redux =======\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     items: state.contacts.items,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onAddContact: (name, number) => dispatch(actions.addContact(name, number)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport s from '../Contacts/Contacts.module.css';\r\nimport * as actions from '../../redux/actions';\r\n\r\nexport default function ContactsItem({ id, name, number }) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        {name}: {number}\r\n      </p>\r\n      <button\r\n        className={s.del__btn}\r\n        type=\"button\"\r\n        onClick={() => dispatch(actions.delContact(id))}\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nContactsItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  // onDelContact: PropTypes.func.isRequired,\r\n};\r\n\r\n//======= vinilla redux =======\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDelContact: id => dispatch(actions.delContact(id)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactsItem);\r\n","import { useSelector } from 'react-redux';\r\nimport s from './Contacts.module.css';\r\nimport ContactsItem from '../ContactsItem/ContactsItem';\r\n\r\nexport default function Contacts() {\r\n  const contacts = useSelector(state => {\r\n    const { items, filter } = state.contacts;\r\n    return items.filter(item => item.name.toLowerCase().includes(filter));\r\n  });\r\n\r\n  return (\r\n    <ul className={s.contacts__list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.contacts__item}>\r\n          <ContactsItem id={id} name={name} number={number} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n//======= vinilla redux =======\r\n// const getVisibleContacts = (items, filter) => {\r\n//   return items.filter(item => item.name.toLowerCase().includes(filter));\r\n// };\r\n\r\n// const mapStateToProps = state => {\r\n//   const { items, filter } = state.contacts;\r\n//   const visibleContacts = getVisibleContacts(items, filter);\r\n//   return {\r\n//     contacts: visibleContacts,\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps)(Contacts);\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport s from '../Contacts/Contacts.module.css';\r\nimport * as actions from '../../redux/actions';\r\n\r\nexport default function ContactsSearch() {\r\n  const value = useSelector(state => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={s.wrapper}>\r\n      <input\r\n        placeholder=\"Find contacts by name\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={event =>\r\n          dispatch(actions.searchContact(event.target.value.toLowerCase()))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\n//======= vinilla redux =======\r\n// const mapStateToProps = state => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: event =>\r\n//     dispatch(actions.searchContact(event.target.value.toLowerCase())),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsSearch);\r\n","import { connect } from 'react-redux';\nimport Section from './Section/Section';\nimport Form from './Form/Form';\nimport Contacts from './Contacts/Contacts';\nimport ContactsSearch from './ContactsSearch/ContactsSearch';\nimport s from './Contacts/Contacts.module.css';\n\nfunction Phonebook({ items }) {\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        {items.length > 0 ? (\n          <>\n            <ContactsSearch />\n            <Contacts />\n          </>\n        ) : (\n          <div className={s.wrapper}>\n            <p className={s.text}>No contacts yet</p>\n          </div>\n        )}\n      </Section>\n    </>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    items: state.contacts.items,\n  };\n};\n\nexport default connect(mapStateToProps)(Phonebook);\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './actions';\r\n\r\nconst initialState = {\r\n  items: [],\r\n  filter: '',\r\n};\r\n\r\nconst reducers = createReducer(initialState, {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    return { ...state, items: [...state.items, payload] };\r\n  },\r\n  [actions.delContact]: (state, { payload }) => {\r\n    const newContactsArr = state.items.filter(item => item.id !== payload);\r\n    return { ...state, items: newContactsArr };\r\n  },\r\n  [actions.searchContact]: (state, { payload }) => ({\r\n    ...state,\r\n    filter: payload,\r\n  }),\r\n});\r\n\r\nexport default reducers;\r\n\r\n//======= vinilla redux =======\r\n// import * as types from './types';\r\n\r\n// const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\r\n\r\n// const initialState = {\r\n//   items: parsedContacts || [],\r\n//   filter: '',\r\n// };\r\n\r\n// const reducers = (state = initialState, { type, payload }) => {\r\n//   const { items } = state;\r\n\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       localStorage.setItem('contacts', JSON.stringify([...items, payload]));\r\n//       return { ...state, items: [...items, payload] };\r\n\r\n//     case types.DEL:\r\n//       const newContactsArr = items.filter(item => item.id !== payload);\r\n//       localStorage.setItem('contacts', JSON.stringify(newContactsArr));\r\n//       return { ...state, items: newContactsArr };\r\n\r\n//     case types.SEARCH:\r\n//       return { ...state, filter: payload };\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default reducers;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport reducers from './reducer';\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistConfig, reducers),\r\n  },\r\n  // official fix of non-serializable data ===\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }), // ===================================\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n// export default { store, persistor };\r\n\r\n//======= vinilla redux =======\r\n// import { createStore } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import reducers from './reducer';\r\n\r\n// const store = createStore({\r\n//     contacts: reducers,\r\n//   }, composeWithDevTools());\r\n\r\n// export default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Contacts_wrapper__3Uo7U\",\"contacts__list\":\"Contacts_contacts__list__DQPMa\",\"contacts__item\":\"Contacts_contacts__item__1ci8B\",\"text\":\"Contacts_text__1Uxve\",\"del__btn\":\"Contacts_del__btn__1lmPd\"};"],"sourceRoot":""}